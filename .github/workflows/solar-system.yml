name: Solar-Sytem-Unit-Testin
on: 
  workflow_dispatch:
  push:
    branches: 
      - main
      - "feature/*"
env:
  MONGO_URI: "mongo+srv://supercluster.d83jj.mongodb.net/superData"
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD}}
jobs:
  Unit-Testing:
    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [18]
        # exclude:
        #   - os: windows-latest
        #   - version: [18,20,22]
    # concurrency: 
    #   cancel-in-progress: false
    #   group: prodnpm install
    
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      
      - name: Setting up Node JS
        uses: actions/checkout@v4.2.2
        with:
          node-version: ${{matrix.version}}

      - name: Cache NPM dependencies
        uses: actions/cache@v4.2.0
        with:
          path: node_modules
          key: ${{ runner.os}}-node_modules-${{ hashFiles('package-lock.json')}}
      
      
      - name: Installing Dependencies
        run: |
          npm -v
          node -v
          npm install

      - name: Testing the App
        timeout-minutes: 3
        id: mytest_id
        run: npm test


      - name: Upload the artifacts
        # if: steps.mytest_id.outcome == 'success' || steps.mytest_id.outcome == 'failure'
        # if: failure() || success()
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: my-artifacts
          path: test-results.xml

  Code_Coverage:
    # needs: Unit-Testing
    name: Code Coverage Test
    # strategy:
    #   matrix:
    #     os: [ubuntu-latest, windows-latest]
    # # concurrency: 
    # #   cancel-in-progress: false
    # #   group: prodnpm install
    
    # runs-on: ${{matrix.os}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      
      - name: Setting up Node JS
        uses: actions/checkout@v4.2.2
        with:
          node-version: '18'

          
      - name: Cache NPM dependencies
        uses: actions/cache@v4.2.0
        with:
          path: node_modules
          key: ${{ runner.os}}-node_modules-${{ hashFiles('package-lock.json')}}
      
      - name: Installing Dependencies
        run: |
          npm -v
          node -v
          npm install

      - name: Testing the App
        timeout-minutes: 3
        run: npm test

      - name: Test Coverage
        timeout-minutes: 3
        run: |
          npm run coverage
        continue-on-error: true

      - name: Upload the artifacts.10th
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          retention-days: 8

  Dokcer_login:
    name: Login_to_Dockerhub
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [Unit-Testing, Code_Coverage]
    steps:
      - name: Chenckout The repo
        uses: actions/checkout@v4.2.2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{vars.DOCKERHUB_USERNAME}}/solar-syatem:${{github.sha}}

      - name: Listing the images
        run: |
          docker images
          docker ps -a

      - name: Testing the images
        run: |
          docker images
          docker ps -a
          docker run --name my_solar-syatem -d \
          -p 3000:3000 \
          -e MONGO_URI=uriPlaceholder \
          -e MONGO_USERNAME=usernamePlaceholder \
          -e MONGO_PASSWORD=passwordPlaceholder \
          ${{vars.DOCKERHUB_USERNAME}}/solar-syatem:${{github.sha}}

          echo $IP
          echo "Tsting the Images via wget command"
          wget -q -O - 127.0.0.1:3000 | grep live

        


